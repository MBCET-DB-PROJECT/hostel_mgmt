import Sidebar from "@/components/SideBar";
import TopBar from "@/components/TopBar";
import React, { useState } from "react";
import "tailwindcss/tailwind.css";
import { FaPlus } from "react-icons/fa";
import { useEffect } from "react";
import RoomData from "../data/Rooms.json";
import { collection, getDocs, getFirestore } from "firebase/firestore";
import app from "@/app/firebase";

interface SidebarProps {
  isOpen: boolean;
}
interface Room {
  id: number;
  number: number;
  status: "occupied" | "unoccupied";
}

interface StudentDetails {

  roomno:string;
  count:number;
}

interface RoomCardProps {
  data : StudentDetails;
  
}

interface RoomDetailsProps {
 
}


const RoomDetails:React.FC<RoomDetailsProps> = ({}) => {
  const [roomDetails,setRoomDetails] = React.useState<StudentDetails[]>([]
    );
    const [loadingData,setLoadingData] = React.useState(true);
    const fetchRoomno = async() => {
      const db = getFirestore(app);
      const roomsRef = collection(db,"student");

      try {
      const roomsSnapshot = await getDocs(roomsRef);
      const uniqueRoomNumbers = new Set<string>();
      

      const roomCountMap = new Map<string, number>();

      const fetchedRoomDetails = roomsSnapshot.docs.reduce((acc, doc) => {
        const roomno = doc.data().roomno;

        // Increment count for each roomno
        const count = roomCountMap.get(roomno) || 0;
        roomCountMap.set(roomno, count + 1);

        return acc;
      }, [] as StudentDetails[]);

      // Filter unique roomno values
      const uniqueRoomDetails = Array.from(roomCountMap).map(([roomno, count]) => ({
        roomno,
        count,
      }));

      setRoomDetails(uniqueRoomDetails);
    } catch(error: any) {
      console.log('Error fetching room numbers:',error.code,error.message);
    } finally {
      setLoadingData(false);
   }
  }
  React.useEffect(() => {
    fetchRoomno();
  },[]);

  if(loadingData) {
    return <p>Loading...</p>;
  }
  return (
    <div className="flex justify-around   mx-5 mt-5 space-x-5 h-5/6">
      <div className=" bg-blue-200 p-4 md:w-1/3 w-1/2 rounded-md shadow-md ">
      <h1 className="flex justify-center font-semibold text-2xl text-center">
          Occupied Rooms
        </h1>
        <div className="mt-2 flex items-center justify-center border-b  p-3 border-black"></div>
        {roomDetails.map((room, index) => (
          <RoomsCard key={index} data={room}  />
        ))}
        </div>
        <div className=" bg-white p-4 md:w-1/3 w-1/2 right-0 rounded-md shadow-md">
        <h1 className="flex justify-center font-semibold text-2xl text-center">
          Unoccupied Rooms
        </h1>
        <div className="mt-2 flex items-center justify-center border-b  p-3 border-black"></div>

        </div>
      </div>
  )
}




const RoomsCard: React.FC<RoomCardProps> = ({data}) => {
  const [isSidebarOpen, setSidebarOpen] = useState(false);
  //function to handle user button click

 // const [rooms, setRooms] = useState<Room[]>([]); // Use the Room interface here

  /*useEffect(() => {
      setRooms(RoomData);
    }, []);*/
  /*useEffect(() => {
      fetch("../data/Rooms.json")
        .then((response) => response.json())
        .then((data) => {
          console.log(data); // Log the fetched data
          setRooms(data as Room[]); // Try setting rooms after logging
        })
        .catch((error) => console.error("Error fetching rooms:", error));
    }, []);
  */
 /* useEffect(() => {
    setRooms(RoomData as Room[]);
  }, []);
*/
/*
  const occupiedRooms = rooms.filter((room) => room.status === "occupied");
  const unoccupiedRooms = rooms.filter((room) => room.status === "unoccupied");
*/
  const handleSidebarToggle = () => {
    setSidebarOpen(!isSidebarOpen);
  };
  return (
    <div className="flex justify-around   mx-5 mt-5 space-x-5 h-5/6">
      <div className=" bg-blue-200 p-4 md:w-1/3 w-1/2 rounded-md shadow-md ">
        <h1 className="flex justify-center font-semibold text-2xl text-center">
          Occupied Rooms
        </h1>
        <div className="mt-2 flex items-center justify-center border-b  p-3 border-black"></div>
       
          <div
            
            className="mt-2 flex items-center justify-center border-b p-3 border-black"
          >
            Room {data.roomno} (Count: {data.count})
          </div>
       
      </div>

      <div className=" bg-white p-4 md:w-1/3 w-1/2 right-0 rounded-md shadow-md">
        <h1 className="flex justify-center font-semibold text-2xl text-center">
          Unoccupied Rooms
        </h1>
        <div className="mt-2 flex items-center justify-center border-b  p-3 border-black"></div>
       
          <div
           
            className="mt-2 flex items-center justify-center border-b p-3 border-black"
          >
            Room 
          </div>
       
      </div>
    </div>
  );
};

export default RoomDetails;








import Sidebar from "@/components/SideBar";
import TopBar from "@/components/TopBar";
import React, { useState } from "react";
import "tailwindcss/tailwind.css";
import { BsPersonFillAdd } from "react-icons/bs";
import Link from "next/link";
import CreateStudent from "../pages/CreateStudent";
import { IoClose } from "react-icons/io5";
import { useEffect } from "react";
import StudentData from "../data/StudentDetails.json";
import EditStudents from "../pages/EditStudents/[stdId]";
import { getAuth } from "firebase/auth";
import app from "@/app/firebase";
import {
  collection,
  deleteDoc,
  doc,
  getDocs,
  getFirestore,
} from "firebase/firestore";
import router from "next/router";
import { deleteObject, getStorage, ref } from "firebase/storage";
import StudentsList from "@/pages/StudentsList";

interface SidebarProps {
  isOpen: boolean;
}

interface StudentCardProps {
  data: StudentDetails;

  stdId: string;
}

interface StudentDetails {
  stdId: string;
  name: string;
  email: string;
  password: string;
  stdclass: string;
  semester: string;
  roomno: string;
  photo: File | null;
  feespaid: boolean;
  imageUrl: string;
  role: string;
}

interface StudentDetailsProps {
  stdId: string;
}

const StdDetails: React.FC<StudentDetailsProps> = ({ stdId }) => {
  const [studentDetails, setStudentDetails] = React.useState<StudentDetails[]>(
    []
  );

  const [user, loading] = useState(getAuth(app)); //to check whether the student details modal is open
  const [loadingData, setLoadingData] = React.useState(true);
  const [selectedStudent, setSelectedStudent] = useState<any>(null);

  const fetchStudentDetails = async () => {
    try {
      const db = getFirestore(app);
      const studentsRef = collection(db, "student");
  
      const studentsSnapshot = await getDocs(studentsRef);
  
      const studentDetailsArray: StudentDetails[] = [];
  
      studentsSnapshot.forEach((studentDoc) => {
        const studentData = studentDoc.data() as StudentDetails;
  
        // Append the stdId to the student data
        const studentWithId = { ...studentData, stdId: studentDoc.id };
  
        // Add the student data to the array
        studentDetailsArray.push(studentWithId);
      });
  
      if (studentDetailsArray.length > 0) {
        console.log("Student details loaded:", studentDetailsArray);
        setStudentDetails(studentDetailsArray);
      } else {
        console.log("No student details found");
      }
    } catch (error) {
      console.error("Error fetching student details", error);
    } finally {
      setLoadingData(false);
    };
  };
  
  React.useEffect(() => {
    fetchStudentDetails();
  }, [stdId, user]);

  if (loadingData) {
    return <p>Loading...</p>;
  }

  return (
    <div className="mt-5 bg-white rounded-md shadow-lg mx-4 text-center items-center">
      {studentDetails.map((event, index) => (
        <StudentsCard key={index} data={event} stdId={event.stdId} />
      ))}
    </div>
  );
};

const StudentsCard: React.FC<StudentCardProps> = ({ data, stdId }) => {
  const [isSidebarOpen, setSidebarOpen] = useState(false);
  //to check whether sidebar is open in responsive view
  const [isModalOpen, setModalOpen] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState<any>(null);
  const [isBlurry, setBlurry] = useState(false); //to blur background when modal is open
  const handleSidebarToggle = () => {
    //handles sidebar open or not in mobile view
    setSidebarOpen(!isSidebarOpen);
  };

  const handleStudentClick = (student: any) => {
    //to select particular student to show details of in student details modal
    setSelectedStudent(student);
    setModalOpen(true);
  };
  const deleteStudent = async () => {
    const db = getFirestore(app);
    const storage = getStorage(app);
    const auth = getAuth(app);
    const studentsRef = collection(db, "student");
    const studentDoc = doc(db, "student", stdId);

    await deleteDoc(studentDoc);

    const photoRef = ref(storage, `images/${stdId}`);
  };

  useEffect(() => {
    //to set background to blur when modal is open
    if (isModalOpen) {
      setBlurry(true);
    } else {
      setBlurry(false);
    }
  }, [isModalOpen]);

  return (
    <>
      {isModalOpen && selectedStudent && (
        //modal for student details
        <div className="md:w-1/6 md:block shadow-lg">
          <div className="fixed inset-0 flex items-center justify-center z-50">
            <div className="bg-white md:p-8 p-4  rounded-lg md:w-1/2 w-2/3 shadow-md">
              <div className="flex justify-between">
                <h2 className="text-xl font-semibold">Student Details</h2>
                <button
                  onClick={() => setModalOpen(false)}
                  className="hover:bg-gray-200 px-1 py-1 rounded-lg"
                >
                  <IoClose size={24} />
                </button>
              </div>
              <p className="mt-4">Name: {data.name}</p>
              <p>Class: {data.stdclass}</p>
              <p>Sem: {data.semester}</p>
              <p>Room: {data.roomno}</p>
              {/* ... other details */}
              <div className="mt-6">
                <Link
                  href={`/EditStudents/[stdId]`}
                  as={`/EditStudents/${stdId}`}
                  className="mr-4 text-white py-2 px-2 bg-blue-500 rounded-md hover:bg-blue-400"
                >
                  Edit
                </Link>

                <button
                  className="text-white py-2 px-2 bg-red-500 rounded-md hover:bg-red-400"
                  onClick={(e) => {
                    console.log("delete clicked");
                    deleteStudent();
                    setModalOpen(false);
                  }}
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      <div className={` ${isBlurry ? "blur" : ""}`}>
        <div
          className={`md:block md:w-1/6 bg-white h-screen shadow-lg ${
            isSidebarOpen ? "block" : "hidden"
          }`}
        ></div>

        <div className={`m-auto w-full ${isBlurry ? "blur" : ""}`}>
          <div key={data.stdId} onClick={() => handleStudentClick(data)}>
            <form>
              <div >
                <div className="px-5 pb-5 w-full">
                  <div className="flex justify-between py-2">
                    <div>{data.name}</div>
                    <div className="flex right-0 w-1/4 justify-between">
                      <div className="hidden md:block">
                        Class:{data.stdclass}
                      </div>
                      <div className="hidden md:block">Sem:{data.semester}</div>
                      <div
                        className={`flex ${
                          isSidebarOpen ? "hidden md:block" : ""
                        }`}
                      >
                        Room:{data.roomno}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
};

export default StdDetails;
